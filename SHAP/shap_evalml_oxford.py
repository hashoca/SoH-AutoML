# -*- coding: utf-8 -*-
"""SHAP_EVALML_OXFORD

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fgDlnvMsoHy9PKueFNRGCsYIgOefhXVo
"""

# =====================================
# HÜCRE 1: Kurulum
# =====================================
!pip install -q numpy pandas scikit-learn shap matplotlib

import os, zipfile, time, warnings
warnings.filterwarnings("ignore")

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import shap

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

# SHAP bazı sistemlerde np.bool bekleyebiliyor
if not hasattr(np, "bool"):
    np.bool = np.bool_

# =====================================
# HÜCRE 2: Veri Yükleme
# =====================================
# Dosya yolu: kendi dosya adın farklıysa burayı değiştir
CSV_PATH = "/content/combined_8cells_normpeak.csv"   # <- burayı kendi yoluna göre ayarla

df = pd.read_csv(CSV_PATH)

# Beklenen kolonlar (combined dosyasına göre)
REQUIRED = ["Battery", "Cycle", "Normalized_Peak", "Temperature", "SoH"]
missing = [c for c in REQUIRED if c not in df.columns]
if missing:
    raise ValueError(f"❌ Eksik kolon(lar): {missing}\nMevcut kolonlar: {list(df.columns)}")

# NaN temizle ve tipleri düzelt
for c in ["Cycle","Normalized_Peak","Temperature","SoH"]:
    df[c] = pd.to_numeric(df[c], errors="coerce")
df = df.dropna(subset=["Battery","Cycle","Normalized_Peak","Temperature","SoH"]).copy()

cells = sorted(df["Battery"].unique())
print(f"✅ {len(cells)} hücre bulundu: {cells[:8]}")

# =====================================
# HÜCRE 3: LOCO + SHAP
# =====================================
OUTDIR = "/content/evalml_style_shap"
os.makedirs(OUTDIR, exist_ok=True)

FEATURES = ["Cycle","Normalized_Peak","Temperature"]
TARGET = "SoH"
CELL_COL = "Battery"

results = []
long_rows = []

for cell in cells:
    print("\n" + "="*90)
    print(f"🔋 Test Cell: {cell}")
    print("="*90)

    test_df  = df[df[CELL_COL] == cell].copy()
    train_df = df[df[CELL_COL] != cell].copy()

    X_train = train_df[FEATURES]
    y_train = train_df[TARGET]
    X_test  = test_df[FEATURES]
    y_test  = test_df[TARGET]

    # --- Model (LinearRegression; EvalML grafiği formatına uygun) ---
    model = LinearRegression()
    t0 = time.time()
    model.fit(X_train, y_train)
    train_time = time.time() - t0

    # --- Tahmin ve metrikler ---
    y_pred = model.predict(X_test)
    rmse = float(np.sqrt(mean_squared_error(y_test, y_pred)))
    mae  = float(mean_absolute_error(y_test, y_pred))
    r2   = float(r2_score(y_test, y_pred))

    # --- SHAP ---
    explainer = shap.Explainer(model, X_train)  # linear ise LinearExplainer'a otomatik geçer
    sv = explainer(X_test)                      # Explanation objesi

    # Özet SHAP grafiği (dot)
    plt.figure()
    shap.summary_plot(sv, X_test, show=False)
    plt.title(f"EvalML-style SHAP (Cell: {cell})")
    plt.tight_layout()
    img_path = os.path.join(OUTDIR, f"shap_importance_{cell}.png")
    plt.savefig(img_path, dpi=170, bbox_inches="tight")
    plt.close()

    # Ortalama |SHAP| önemleri
    mean_importance = np.abs(sv.values).mean(axis=0)
    imp_map = dict(zip(FEATURES, mean_importance))

    # Hücreye özel SHAP verisi (geniş format)
    per_cell = X_test.reset_index(drop=True).copy()
    for j, f in enumerate(FEATURES):
        per_cell[f"SHAP_{f}"] = sv.values[:, j]
        per_cell[f"ABS_SHAP_{f}"] = np.abs(sv.values[:, j])
    per_cell[TARGET] = y_test.reset_index(drop=True)
    per_cell_path = os.path.join(OUTDIR, f"shap_cell_{cell}.csv")
    per_cell.to_csv(per_cell_path, index=False)

    # Uzun format (summary plot’u yeniden üretmek için)
    for i in range(len(X_test)):
        for j, f in enumerate(FEATURES):
            long_rows.append({
                "Battery": cell,
                "RowIndex": i,
                "Feature": f,
                "FeatureValue": float(X_test.iloc[i, j]),
                "SHAPValue": float(sv.values[i, j]),
                "ABS_SHAP": float(abs(sv.values[i, j])),
                TARGET: float(y_test.iloc[i])
            })

    # Sonuç satırı
    results.append({
        "Test_Cell": cell,
        "RMSE": round(rmse, 6),
        "MAE": round(mae, 6),
        "R2": round(r2, 6),
        "Train_Time_sec": round(train_time, 4),
        **{f"Mean_|SHAP|_{f}": round(imp_map[f], 8) for f in FEATURES}
    })

    print(f"✅ RMSE={rmse:.5f} | R2={r2:.4f}")
    print("🔍 Ortalama |SHAP| sıralaması:", sorted(imp_map.items(), key=lambda x: -x[1]))

# =====================================
# HÜCRE 4: Çıktıları Kaydet
# =====================================
# Özet metrikler
df_results = pd.DataFrame(results)
summary_csv = os.path.join(OUTDIR, "shap_results_summary.csv")
df_results.to_csv(summary_csv, index=False)

# Uzun format SHAP
df_long = pd.DataFrame(long_rows)
long_csv = os.path.join(OUTDIR, "shap_long_all_cells.csv")
df_long.to_csv(long_csv, index=False)

# ZIP paketi
zip_path = "/content/evalml_style_shap.zip"
with zipfile.ZipFile(zip_path, "w", zipfile.ZIP_DEFLATED) as zf:
    for fn in os.listdir(OUTDIR):
        zf.write(os.path.join(OUTDIR, fn), arcname=os.path.join("evalml_style_shap", fn))

print("\n📦 Çıktılar hazır:")
print(" - Özet CSV:", summary_csv)
print(" - Uzun format SHAP CSV:", long_csv)
print(" - Tüm dosyalar (ZIP):", zip_path)





